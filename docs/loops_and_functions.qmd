---
title: "Loops and Functions"
format: html
---
## For loops
Task 1
```{r}
# create sequences
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")

transects <- c("Transect A", "Transect B", "Transect C")

# create nested loop to output a matrix

# output matrix
out_matrix <- matrix(nrow = length(weekdays), ncol = length(transects))

# does each week day, fills along row by transect 
for (i in seq_along(weekdays)){
  for (j in seq_along(transects)){
    day_transect <- paste(weekdays[i], "-", transects[j])
    out_matrix[i,j] <- day_transect
  }
}
```

## Functions
Task 2
```{r}
# create function
force <- function(mass, acceleration){
  calculated_force <- (mass*acceleration)
  print(paste("The resulting force is", calculated_force, "Newtons"))
}

# use function
force(10, 10)
```

Task 3
```{r}
sci_name <- c("Chanos chanos", "Sphyraena barracuda", "Carnax ignobilis")
common_name <- c("Milkfish", "Great barracuda", "Giant trevally")
a_est <- c(0.095, 0.0181, 0.0353)
b_est <- c(2.52, 3.27, 3.05)

# create a data frame from sequences 
fish_parms <- data.frame(sci_name, common_name, a_est, b_est)

# write function- uses filter- keep rows that match condition 
fish_weight <- function(fish_name, tot_length){ 
  fish_subset <- fish_parms |> # creating subset from original df
    dplyr::filter(common_name == fish_name)
  weight <- fish_subset$a_est * (tot_length ^ fish_subset$b_est)
  return(weight)
}

# use function
fish_weight(fish_name = "Milkfish", tot_length = 57)

# create vector
lengths <- seq(from = 0, to = 100, by = 1)

milkfish_weights <- fish_weight("Milkfish", lengths)

```

Task 4
```{r}
wave_power <- function(H, T){
  power <- 0.5 * H^2 * T
  return(power)
}

wave_heights <- seq(from = 0, to = 3, by = 0.2)
wave_power(wave_heights, 8)
```

Task 5
```{r}
wave_power <- function(D, H, T){
  if (D > 12){
    message("The deep water equation was used")
    power <- 0.5 * H^2 * T
    return(power)
  } else if (D <= 12){
    message("The shallow water equation was used")
    power <- 0.81 * H^2 * T
    return(power)
  }
}

wave_heights <- seq(from = 0, to = 3, by = 0.2)
wave_power(10, wave_heights, 8)
```

